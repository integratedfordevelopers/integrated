<svg class="integrated-svg-defs">
    <defs>
        <symbol id="integrated-icon-plus" viewBox="0 0 32 32">
            <path d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"></path>
        </symbol>
        <symbol id="integrated-icon-edit" viewBox="0 0 384 448">
            <path d="M101 277l38 38-13 13h-14v-24h-24v-14zM204.5 179.5c2 1.75 1.5 5.25-0.75 7.5l-72.75 72.75c-2.25 2.25-5.75 2.75-7.5 0.75-2-1.75-1.5-5.25 0.75-7.5l72.75-72.75c2.25-2.25 5.75-2.75 7.5-0.75zM136 352l136-136-72-72-136 136v72h72zM288 200l23-23c9.25-9.25 9.25-24.75 0-34l-38-38c-9.25-9.25-24.75-9.25-34 0l-23 23zM384 104v240c0 39.75-32.25 72-72 72h-240c-39.75 0-72-32.25-72-72v-240c0-39.75 32.25-72 72-72h240c39.75 0 72 32.25 72 72z"></path>
        </symbol>
        <symbol id="integrated-icon-remove" viewBox="0 0 512 512">
            <path d="M507.331 411.33c-0.002-0.002-0.004-0.004-0.006-0.005l-155.322-155.325 155.322-155.325c0.002-0.002 0.004-0.003 0.006-0.005 1.672-1.673 2.881-3.627 3.656-5.708 2.123-5.688 0.912-12.341-3.662-16.915l-73.373-73.373c-4.574-4.573-11.225-5.783-16.914-3.66-2.080 0.775-4.035 1.984-5.709 3.655 0 0.002-0.002 0.003-0.004 0.005l-155.324 155.326-155.324-155.325c-0.002-0.002-0.003-0.003-0.005-0.005-1.673-1.671-3.627-2.88-5.707-3.655-5.69-2.124-12.341-0.913-16.915 3.66l-73.374 73.374c-4.574 4.574-5.784 11.226-3.661 16.914 0.776 2.080 1.985 4.036 3.656 5.708 0.002 0.001 0.003 0.003 0.005 0.005l155.325 155.324-155.325 155.326c-0.001 0.002-0.003 0.003-0.004 0.005-1.671 1.673-2.88 3.627-3.657 5.707-2.124 5.688-0.913 12.341 3.661 16.915l73.374 73.373c4.575 4.574 11.226 5.784 16.915 3.661 2.080-0.776 4.035-1.985 5.708-3.656 0.001-0.002 0.003-0.003 0.005-0.005l155.324-155.325 155.324 155.325c0.002 0.001 0.004 0.003 0.006 0.004 1.674 1.672 3.627 2.881 5.707 3.657 5.689 2.123 12.342 0.913 16.914-3.661l73.373-73.374c4.574-4.574 5.785-11.227 3.662-16.915-0.776-2.080-1.985-4.034-3.657-5.707z"></path>
        </symbol>
        <symbol id="integrated-icon-column2" viewBox="0 0 416 448">
            <path d="M40 384h152v-288h-160v280c0 4.25 3.75 8 8 8zM384 376v-280h-160v288h152c4.25 0 8-3.75 8-8zM416 72v304c0 22-18 40-40 40h-336c-22 0-40-18-40-40v-304c0-22 18-40 40-40h336c22 0 40 18 40 40z"></path>
        </symbol>
        <symbol id="integrated-icon-column" viewBox="0 0 768 768">
            <path d="M511.5 160.5h160.5v415.5h-160.5v-415.5zM127.5 576v-415.5h160.5v415.5h-160.5zM319.5 576v-415.5h160.5v415.5h-160.5z"></path>
        </symbol>
        <symbol id="integrated-icon-text" viewBox="0 0 32 32">
            <path d="M10.063 26l1.8-6h8.274l1.8 6h3.551l-6-20h-6.976l-6 20h3.551zM14.863 10h2.274l1.8 6h-5.874l1.8-6z"></path>
        </symbol>
    </defs>
</svg>
<script>
    !function (Routing) {
        /**
         * @type object|null
         */
        var $blockTarget = null;

        /**
         * @param Element $element
         */
        var initGrid = function ($element) {
            $element.querySelectorAll('[data-block-type="row"]').forEach(item =>
                item.insertBefore(createRowButtons(), item.firstChild)
            );

            $element.querySelectorAll('[data-block-type="column"]').forEach(item =>
                item.appendChild(createColumnButtons())
            );

            $element.appendChild(createColumnButtons());

            $element.querySelectorAll('[data-block-type="block"]').forEach(item => {
                item.parentNode.insertBefore(createBlockButtons(), item);
            });
        };

        /**
         * @param {string} blockId
         * @param element  $before
         */
        var addBlock = function(blockId, $before) {
            var element = document.createElement('div');

            element.dataset.id = blockId;
            element.dataset.blockType = 'block';
            element.classList.add('integrated-website-sortable');

            $before.insertAdjacentElement('beforebegin', element);

            refreshBlock(element);
        };

        /**
         * @param element $block
         */
        var refreshBlock = function($block, buttons = true) {
            fetch('{{ path('integrated_block_block_show', {'id': 'block-id'}) }}'.replace('block-id', $block.dataset.id))
                .then(response => response.json())
                .then(data => {
                    $block.innerHTML = data.html;
                    if (buttons) {
                        $block.insertBefore(createBlockButtons(), $block.firstChild);
                    }
                });
        };

        /**
         * @return element
         */
        var createRow = function () {
            var element = document.createElement('div');

            element.dataset.blockType = 'row';
            element.classList.add('row');
            element.classList.add('integrated-website-sortable');

            return element;
        };

        /**
         * @param size
         */
        var createColumn = function(size) {
            var element = document.createElement('div');

            element.dataset.blockType = 'column';
            element.dataset.size = size;
            element.classList.add('integrated-website-col');
            element.classList.add('integrated-website-droppable');
            element.classList.add('col-sm-'+size);

            element.appendChild(createColumnButtons());

            initSortable(element);

            return element;
        };

        /**
         * @return Element
         */
        var createRowButtons = function () {
            var element = document.createElement('div');
            element.classList.add('integrated-block-buttons');
            element.innerHTML = '' +
                '<a href="javascript:;" class="integrated-block-button integrated-website-block-column-add" data-action="integrated-website-block-add" title="{% trans %}Add block{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-plus"><use xlink:href="#integrated-icon-plus"></use></svg>' +
                '<span>{% trans %}Add block{% endtrans %}</span></a>' +
                '<a href="javascript:;" class="integrated-block-button" data-action="integrated-website-cols-config" title="{% trans %}Configure columns{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-plus"><use xlink:href="#integrated-icon-plus"></use></svg>' +
                '<span>{% trans %}Configure columns{% endtrans %}</span></a>' +
                '<a href="javascript:;" class="integrated-block-button integrated-website-column-remove" data-action="integrated-website-column-remove" title="{% trans %}Remove{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-remove"><use xlink:href="#integrated-icon-remove"></use></svg>' +
                '<span class="integrated-block-button-label">{% trans %}Remove column{% endtrans %}</a></span>';

            return element;
        };

        /**
         * @return Element
         */
        var createColumnButtons = function () {
            var element = document.createElement('div');
            element.classList.add('integrated-block-buttons');
            element.innerHTML = '' +
                '<a href="javascript:;" class="integrated-block-button" data-action="integrated-website-block-add" title="{% trans %}Add block{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-plus"><use xlink:href="#integrated-icon-plus"></use></svg>' +
                '<span>{% trans %}Add block{% endtrans %}</span></a>' +
                '<a href="javascript:;" class="integrated-block-button" data-action="integrated-website-textblock-add" title="{% trans %}Add text block{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-text"><use xlink:href="#integrated-icon-text"></use></svg>' +
                '<span>{% trans %}Add text block{% endtrans %}</span></a>' +
                '<a href="javascript:;" class="integrated-block-button" data-action="integrated-website-cols-add" title="{% trans %}Add columns{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-column"><use xlink:href="#integrated-icon-column"></use></svg>' +
                '<span>{% trans %}Add columns{% endtrans %}</span></a>';

            return element;
        };

        /**
         * @return Element
         */
        var createBlockButtons = function() {
            var element = document.createElement('div');
            element.classList.add('integrated-block-buttons');
            element.innerHTML =
                '<a href="javascript:;" class="integrated-block-button" data-action="integrated-website-block-add" title="{% trans %}Add{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-plus"><use xlink:href="#integrated-icon-plus"></use></svg>' +
                '<span class="integrated-block-button-label">{% trans %}Add block{% endtrans %}</a></span>' +

                '<a href="javascript:;" class="integrated-block-button integrated-website-block-edit" data-action="integrated-website-block-edit" title="{% trans %}Edit{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-edit"><use xlink:href="#integrated-icon-edit"></use></svg>' +
                '<span class="integrated-block-button-label">{% trans %}Edit block{% endtrans %}</a></span>' +

                '<a href="javascript:;" class="integrated-block-button integrated-website-block-remove" data-action="integrated-website-block-remove" title="{% trans %}Remove{% endtrans %}">' +
                '   <svg class="integrated-icon integrated-icon-remove"><use xlink:href="#integrated-icon-remove"></use></svg>' +
                '<span class="integrated-block-button-label">{% trans %}Remove block{% endtrans %}</a></span>';

            return element;
        };

        var showLoader = function() {
            let element = document.createElement('div');

            element.innerHTML = '<div id="integrated-loader"><div id="integrated-loader-spinner"></div></div></div>';
            document.querySelector('body').insertAdjacentElement('afterend', element);
        };

        var hideLoader = function() {
            let element = document.querySelector('#integrated-loader');

            element.parentNode.removeChild(element);
        };

        var addBlockModalTemplateHTML = function(data) {
            var output = `<div>
                   <div id="add_block_filters" class="integrated-control-row">
                       <form id="add_block_filters_form" action="{{ path('integrated_block_block_index', { '_format': 'json', 'limit': 10}) }}">
                           <div class="">
                               <div class="dropdown">
                                   <button type="button" class="integrated-button integrated-button-dropdown" data-integrated-dropdown="integrated-createblock-dropdown" >{% trans %}Create block{% endtrans %}
                                       <div class="integrated-button-icon">
                                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16"><path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/></svg>
                                       </div>\n
                                   </button>\n
                                   <ul class="integrated-website-toolbar-dropdown integrated-block-filter" id="integrated-createblock-dropdown">\n
                    {% for metadata in integrated_find_block_types() if 'InlineTextBlock' not in metadata.class %}
                                       <li role="presentation">\n
                                               <a href="{{ path('integrated_block_block_new', { '_format': 'iframe.html', 'class': metadata.class} ) }}" data-action="integrated-website-block-new">{{ metadata.type|default(metadata.class) }}</a>
                                           </li>\n
                    {% endfor %}
                                        </ul>
                                    </div>\n
                               </div>\n
                               <div class="">\n
                                   <select class="integrated-form-control integrated-block-filter" name="integrated_block_filter[type][]" id="integrated_block_filter_type">\n
                                       <option value="">{% trans %}Filter type{% endtrans %}</option>\n
                                        ${data.filters.type.map(type => `<option value="${type.value}" ${type.value == data.type ? "selected" : ""}>${type.label}</option>`).join('')}
                                        </select>\n
                                    </div>\n
                                    <div class="">\n
                                        <div class="input-group">\n
                                            <input type="text" value="${data.q}" class="integrated-form-control" name="integrated_block_filter[q]" id="integrated_block_filter_q" placeholder="{% trans %}Search{% endtrans %}...">\n
                                        </div>\n
                                    </div>\n
                                    <div class="">\n
                                        <select class="integrated-form-control integrated-block-filter" name="integrated_block_filter[channels][]" id="integrated_block_filter_channels">\n
                                            <option value="">{% trans %}Filter channel{% endtrans %}</option>\n
                                            ${data.filters.channels.map(channel => `<option value="${channel.value}" ${channel.value == data.channel ? "selected" : ""}>${channel.label}</option>`).join('')}
                                        </select>\n
                                    </div>\n
                            </form>\n
                        </div>\n
                        <div id="add_block_results">\n
                           ${data.blocks.map(block => `<div class="integrated-card" data-action="integrated-website-block-choose" data-id="${block.id}">
                                    <p><b>${block.title}</b></p>
                                    <p>${block.type}</p>
                                </div>`).join('')}
                        </div>\n
                        <div>`;

            if (data.blocks.length == 0) {
                output = output + '{% trans %}No blocks found with this search query{% endtrans %}\n';
            }

            if (data.pagination.pageCount > 0) {
                output = output + '<ul class="integrated-pagination" id="add_block_pagination">\n';

                if (data.pagination.previous) {
                    output = output + `<li class="integrated-pagination-link" data-href="${data.pagination.previous.href}">&laquo;</li>`;
                } else {
                    output = output + `<li class="integrated-pagination-disabled"><span>&laquo;</span></li>`;
                }

                for (var key in data.pagination.pages) {
                    page = data.pagination.pages[key];
                    if (data.pagination.page == key) {
                        output = output + `<li class="integrated-pagination-active integrated-pagination-disabled" data-href="${page.href}">${key}</li>`;
                    } else {
                        output = output + `<li class="integrated-pagination-link" data-href="${page.href}">${key}</li>`;
                    }
                };

                if (data.pagination.next) {
                    output = output + `<li class="integrated-pagination-link" data-href="${data.pagination.next.href}">&raquo;</li>`;
                } else {
                    output = output + `<li class="integrated-pagination-disabled"><span>&raquo;</span></li>`;
                }

                output = output + '</ul>\n';
            }

            output = output + '</div>\n' +
            '    </div>\n';

            return output;
        }

        /**
         * Init grid buttons on page load
         */
        function init() {
            document.querySelectorAll('.integrated-website-grid').forEach(item =>
                initGrid(item)
            );

            /**
             * Make grid sortable
             */
            //
            document.querySelectorAll('.integrated-website-droppable').forEach(item =>
                initSortable(item)
            );
        }

        if (document.readyState != 'loading'){
            init();
        } else {
            document.addEventListener('DOMContentLoaded', init);
        }

        /**
         * Handle mouseover
         */
        document.body.addEventListener('mouseenter', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-edit"], .integrated-website-block-remove');
            if (!element) {
                return;
            }

            element.parentNode.nextSibling.classList.add('integrated-block-hover');
        }, true);

        document.body.addEventListener('mouseenter', function(e) {
            element = e.target.closest('.integrated-website-column-remove');
            if (!element) {
                return;
            }

            element.parentNode.parentNode.classList.add('integrated-block-hover');
        }, true);

        document.body.addEventListener('mouseleave', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-edit"], .integrated-website-block-remove');
            if (!element) {
                return;
            }

            element.parentNode.nextSibling.classList.remove('integrated-block-hover');
        }, true);

        document.body.addEventListener('mouseleave', function(e) {
            element = e.target.closest('.integrated-website-column-remove');
            if (!element) {
                return;
            }

            element.parentNode.parentNode.classList.remove('integrated-block-hover');
        }, true);

        document.body.addEventListener('mouseenter', function(e) {
            element = e.target.closest('[data-action="integrated-website-cols-config"]');
            if (!element) {
                return;
            }

            Array.from(element.parentNode.parentNode.children).forEach(item => {
                if (item.classList.contains('integrated-website-col')) {
                    item.classList.add('integrated-block-hover');
                }
            });
        }, true);

        document.body.addEventListener('mouseleave', function(e) {
            element = e.target.closest('[data-action="integrated-website-cols-config"]');
            if (!element) {
                return;
            }

            Array.from(element.parentNode.parentNode.children).forEach(item => {
                if (item.classList.contains('integrated-website-col')) {
                    item.classList.remove('integrated-block-hover');
                }
            });
        }, true);

        /**
         * Handle add block button
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-add"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            showLoader();

            $blockTarget = element.parentNode;
            if (element.classList.contains('integrated-website-block-column-add')) {
                $blockTarget = $blockTarget.parentNode;
            }

            fetch('{{ path('integrated_block_block_index', { '_format': 'json', 'limit': 10}) }}')
                .then(response => response.json())
                .then(data => {
                    // success
                    data.type = '';
                    data.q = '';
                    data.channel = '';

                    Integrated.showModal('{% trans %}Add block{% endtrans %}', addBlockModalTemplateHTML(data));

                    hideLoader();
                });
        });

        /**
         * Handle edit
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-edit"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            $blockTarget = null;

            editElement = element.parentNode.nextSibling;

            var blockId = editElement.dataset.id;
            var url = '{{ path('integrated_block_block_edit', {'id': 'block-id', '_format':'iframe.html'}) }}'.replace('block-id', blockId);
            createIframe(url, 'Edit block');
        });

        /**
         * Handle remove
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('.integrated-website-block-remove');
            if (!element) {
                return;
            }

            e.preventDefault();

            if (confirm('Are you sure?')) {
                removeElement = element.parentNode.nextSibling;
                removeElement.parentNode.removeChild(removeElement);

                removeElement = element.parentNode;
                removeElement.parentNode.removeChild(removeElement);
            }
        });

        /**
         * Handle column remove
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('.integrated-website-column-remove');
            if (!element) {
                return;
            }

            e.preventDefault();

            if (confirm('Are you sure?')) {
                removeElement = element.parentNode.parentNode;
                removeElement.parentNode.removeChild(removeElement);
            }
        });

        /**
         * Handle choose block button
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-choose"]');
            if (!element) {
                return;
            }

            addBlock(element.dataset.id, $blockTarget);

            Integrated.hideModal();
        });

        /**
         * Handle new block button
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-new"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            Integrated.hideModal();
            createIframe(e.target.getAttribute('href'), 'Add block');
        });

        /**
         * Add columns
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-cols-add"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            var total = parseInt(prompt('How many columns do you want?'));

            if (total > 12) {
                alert('A maxiumum of 12 columns is supported')
                return;
            }

            if (total > 0) {
                var $row = createRow();
                var doneSize = 0;

                for (var i = 0; i < total; i++) {
                    var size = parseInt(prompt('Size of column ' + (i+1) + '? ('+(12-doneSize)+' or 12 available)'));

                    if (size < 1) {
                        alert('Size must be at least one');

                        return;
                    }

                    if (size > (12-doneSize)) {
                        alert('Size must be at most '+(12-doneSize));

                        return;
                    }

                    doneSize = doneSize + size;

                    $row.append(createColumn(size));
                }

                $row.append(createRowButtons());

                element.parentNode.insertAdjacentElement('beforebegin', $row);
            }
        });

       /**
         * Update row and columns
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-cols-config"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            var $row = element.parentNode.parentNode;
            var $oldColumns = $row.querySelectorAll(':scope > [data-block-type="column"]');

            var total = parseInt(prompt('How many columns do you want?', $oldColumns.length));

            if (total > 12) {
                alert('A maxiumum of 12 columns is supported')
                return;
            }

            if (total > 0) {
                var doneSize = 0;
                for (var i = 0; i < total; i++) {
                    var oldSize = '';

                    if ($oldColumns[i]) {
                        oldSize = $oldColumns[i].dataset.size;
                    }

                    var size = parseInt(prompt('Size of column ' + (i+1) + '? ('+(12-doneSize)+' or 12 available)', oldSize));

                    if (size < 1) {
                        alert('Size must be at least one');

                        return;
                    }

                    if (size > (12-doneSize)) {
                        alert('Size must be at most '+(12-doneSize));

                        return;
                    }

                    doneSize = doneSize + size;

                    if ($oldColumns[i]) {
                        $oldColumns[i].setAttribute('class', 'integrated-website-col integrated-website-droppable col-sm-' + size);
                        $oldColumns[i].dataset.size = size;
                    } else {
                        $row.appendChild(createColumn(size));
                    }
                }

                element.parentNode.removeChild(element);

                //if there were more columns, remove the last columns
                while (typeof $oldColumns[i]  !== 'undefined') {
                    $oldColumns[i].parentNode.removeChild($oldColumns[i]);
                }

                $row.insertBefore(createRowButtons(), $row.firstChild);
            }

            if (total === 0) {
                //no count, so remove entire row
                $row.parentNode.removeChild($row);
            }
        });

        /**
         * Handle new channel block button
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-block-new-channel-block"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            button = element;
            id = element.dataset.id;
            name = element.dataset.name;
            className = element.dataset.class;
            csrfToken = element.dataset.csrfToken;

            $blockTarget = document.getElementById('#create-channel-block-'+id);

            showLoader();

            let formData = new FormData();
            formData.append('id', id);
            formData.append('class', className);
            formData.append('name', name);
            formData.append('csrf_token', csrfToken);

            fetch('{{ path('integrated_block_block_new_channel_block') }}', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    hideLoader();

                    var url = '{{ path('integrated_block_block_edit', {'id': 'block-id', '_format':'iframe.html'}) }}'.replace('block-id', id);
                    createIframe(url, 'Edit block');
                });

        });

        /**
         * Handle new textblock button
         */
        document.body.addEventListener('click', function(e) {
            element = e.target.closest('[data-action="integrated-website-textblock-add"]');
            if (!element) {
                return;
            }

            e.preventDefault();

            showLoader();

            $blockTarget = element.parentNode;
            if (element.classList.contains('integrated-website-block-column-add')) {
                $blockTarget = $blockTarget.parentNode;
            }

            var pageId = document.querySelector('[data-action="integrated-website-page-save"]').dataset.id;

            createIframe('{{ path('integrated_block_inline_text_block_create', {'id': 'page-id'}) }}'.replace('page-id', pageId), '{% trans %}New block{% endtrans %}');

            hideLoader();
        });

        /**
         * @param url
         * @param title
         */
        var createIframe = function(url, title) {
            showLoader();

            let element = document.createElement('iframe');
            element.classList.add('integrated-iframe');
            element.setAttribute('src', url);
            element.style.height = (window.innerHeight - 160)+'px';

            Integrated.showModal(title, element.outerHTML);

            //handle cancel button in iframe
            iframe = document.querySelector('.integrated-iframe');

            iframe.onload = function () {
                cancelButton = iframe.contentWindow.document.querySelector('.integrated-cancel-button');
                if (!cancelButton) {
                    return;
                }

                cancelButton.addEventListener('click', function(e) {
                    e.preventDefault();

                    Integrated.hideModal();
                });
            }

            hideLoader();
        };

        /**
         * @param $element
         */
        var initSortable = function($element) {
            new Sortable($element, {
                group: "integrated-grid",
                sort: true,
                forceFallback: true,
                scrollSpeed: 80,
                draggable: ".integrated-website-sortable",
                ghostClass: "integrated-website-item-ghost",
                dragClass: "integrated-website-item-dragging",
                onStart: function (/**Event*/evt) {
                    $buttons = evt.item.previousElementSibling;
                    $buttons.parentNode.removeChild($buttons);
                },
                onEnd: function (/**Event*/evt) {
                    $newItem = evt.item;
                    $newItem.parentNode.insertBefore(createBlockButtons(), $newItem);
                },
            });
        };

        /**
         * Handle block edit in iframe
         */
        document.addEventListener('block-added', function (e) {
            Integrated.hideModal();

            if ($blockTarget) {
                //new block inserted
                addBlock(e.detail, $blockTarget);
            } else {
                //update block

                document.querySelectorAll('[data-id="' + e.detail + '"]').forEach(item => {
                    refreshBlock(item, false);
                });
            }
        }, false);


        /**
         * Modal eventlisteners
         */

        /**
         * Handle block edit in iframe
         */
        document.addEventListener('change', function (e) {
            if (!e.target.classList.contains('integrated-block-filter')) {
                return;
            }

            refreshBlockData(document.querySelector('#add_block_filters_form'));
            return false;
        });

        document.addEventListener('submit', function (e) {
            if (e.target.id != 'add_block_filters_form') {
                return;
            }

            e.preventDefault();

            refreshBlockData(e.target);
        });

        document.body.addEventListener('click', function(e) {
            element = e.target.closest('#add_block_pagination li');
            if (!element) {
                return;
            }

            e.preventDefault();

            form = document.querySelector('#add_block_filters_form');
            form.setAttribute('action', element.dataset.href);
            refreshBlockData(form);

            return false;
        });

        function refreshBlockData(form) {
            document.querySelector('#add_block_results').innerHTML = 'Loading blocks...';

            fetch(form.action, {
                method: 'post',
                body: new URLSearchParams(new FormData(form)),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response => response.json())
            .then(data => {
                data.type = document.querySelector('[name="integrated_block_filter[type][]"] option:checked').value;
                data.q = document.querySelector('[name="integrated_block_filter[q]"]').value;
                data.channel = document.querySelector('[name="integrated_block_filter[channels][]"] option:checked').value;

                document.querySelector('#add_block_results').parentElement.outerHTML = addBlockModalTemplateHTML(data);
            });
        }
    } (window.Routing);

    var Integrated = Integrated || {};
</script>
